function runTestSuiteTools(translatedDraftsFolder, refinedFolder, varargin)
% This function initialzes the test suite on all reconstructions in
% that should be refined through the semi-automatic refinement pipeline.
%
% USAGE:
%
%    runTestSuiteTools(translatedDraftsFolder, refinedFolder, varargin)
%
%
% REQUIRED INPUTS
% translatedDraftsFolder    Folder with  translated draft COBRA models generated by KBase
%                           pipeline to analyze
% refinedFolder             Folder with refined COBRA models generated by the
%                           refinement pipeline
% OPTIONAL INPUTS
% testResultsFolder         Folder where the test results should be saved
%                           (default: current folder)
% infoFilePath              File with information on reconstructions to refine
%                           (default: AGORA2_infoFile.xlsx)
% inputDataFolder           Folder with experimental data and database files to
%                           load (default: semiautomaticrefinement/input)
% reconVersion              Name of the refined reconstruction resource
%                           (default: "Reconstructions")
% numWorkers                Number of workers in parallel pool (default: 0)
% createReports             Boolean defining if a report for each
%                           reconstruction should be created (default: false).
% reportsFolder             Folder where reports should be saved

% .. Authors:
%       - Almut Heinken, 09/2020

% Define default input parameters if not specified
parser = inputParser();
parser.addRequired('translatedDraftsFolder', @ischar);
parser.addRequired('refinedFolder', @ischar);
parser.addParameter('testResultsFolder', [pwd filesep 'TestResults']', @ischar);
parser.addParameter('infoFilePath', 'AGORA2_infoFile.xlsx', @ischar);
parser.addParameter('inputDataFolder', '', @ischar);
parser.addParameter('numWorkers', 0, @isnumeric);
parser.addParameter('reconVersion', 'Reconstructions', @ischar);
parser.addParameter('createReports', false, @islogical);
parser.addParameter('reportsFolder', '', @ischar);

parser.parse(translatedDraftsFolder, refinedFolder, varargin{:});

translatedDraftsFolder = parser.Results.translatedDraftsFolder;
refinedFolder = parser.Results.refinedFolder;
testResultsFolder = parser.Results.testResultsFolder;
infoFilePath = parser.Results.infoFilePath;
inputDataFolder = parser.Results.inputDataFolder;
numWorkers = parser.Results.numWorkers;
reconVersion = parser.Results.reconVersion;
createReports = parser.Results.createReports;
reportsFolder = parser.Results.reportsFolder;

mkdir(testResultsFolder)

currentDir=pwd;
cd(inputDataFolder)

% only runs the test suite if there are more than five
% reconstructions-otherwise create reports
dInfo = dir(refinedFolder);
modelList={dInfo.name};
modelList=modelList';
modelList(~contains(modelList(:,1),'.mat'),:)=[];
if size(modelList,1)>5

    % Draft reconstructions
    mkdir([testResultsFolder filesep reconVersion '_draft'])
    testAllReconstructionFunctions(translatedDraftsFolder,[testResultsFolder filesep reconVersion '_draft'],reconVersion,numWorkers);
    plotTestSuiteResults([testResultsFolder filesep reconVersion '_draft'],reconVersion);
    
    % Refined reconstructions
    mkdir([testResultsFolder filesep reconVersion '_refined'])
    testAllReconstructionFunctions(refinedFolder,[testResultsFolder filesep reconVersion '_refined'],reconVersion,numWorkers);
    plotTestSuiteResults([testResultsFolder filesep reconVersion '_refined'],reconVersion);
    % prepare a report and highlight debugging efforts still needed
    % printRefinementReport(testResultsFolder,reconVersion)
    
else
    createReports=true;
end

% Give an individual report of each reconstruction if desired.
% Note: this is time-consuming.
% Requires LaTeX and pdflatex installation (e.g., MiKTex package)

if createReports
    
    if isempty(reportsFolder)
        cd(currentDir)
        mkdir([currentDir filesep 'modelReports'])
        reportsFolder=[currentDir filesep 'modelReports' filesep];
    end
    
    cd(reportsFolder)
    if ~isempty(infoFilePath)
        infoFile = readtable(infoFilePath, 'ReadVariableNames', false);
        infoFile = table2cell(infoFile);
        
        dInfo = dir(refinedFolder);
        modelList={dInfo.name};
        modelList=modelList';
        modelList(~contains(modelList(:,1),'.mat'),:)=[];
        
        ncbiCol=find(strcmp(infoFile(1,:),'NCBI Taxonomy ID'));
        if isempty(ncbiCol)
            warning('No NCBI Taxonomy IDs provided. This section in the report will be skipped.')
        end
        
        for i = 1:length(modelList)
            model=readCbModel([refinedFolder filesep modelList{i}]);
            biomassReaction = model.rxns{strncmp('bio', model.rxns, 3)};
            if ~isempty(ncbiCol)
                ncbiID = infoFile(find(strcmp(infoFile(:,1),strrep(modelList{i},'.mat',''))),ncbiCol);
            else
                ncbiID='';
            end
            [outputFile] = reportPDF(model, strrep(modelList{i},'.mat',''), biomassReaction, reportsFolder, ncbiID);
        end
    else
        warning('No organism information provided. Report generation skipped.')
    end
end

cd(currentDir)

end
