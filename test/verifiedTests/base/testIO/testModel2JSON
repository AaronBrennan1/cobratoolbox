% The COBRAToolbox: testModel2JSON.m
%
% Purpose:
%     - Test the model2JSON function, ensuring it converts a toy COBRA model structure to a JSON file correctly.
%
% Authors:
%     - Farid Zare, 24/08/14
%

% Save the current path and initialize the test
currentDir = cd(fileparts(which(mfilename)));

% Determine the test path for references
testPath = pwd;

% Build a toy model from scratch with compartment annotations
model = struct();
model.mets = {'A[c]', 'B[c]'};  % Compartment notation added
model.metNames = {'Metabolite A', 'Metabolite B'};
model.metCharges = [0, 0];
model.metFormulas = {'C6H12O6', 'C4H4O4'};
model.rxns = {'R1'};
model.rxnNames = {'Reaction 1'};
model.S = [-1; 1];  % Stoichiometric matrix: A -> B
model.lb = [0];
model.ub = [1000];
model.c = [1];
model.genes = {'G1'};
model.grRules = {'G1'};
model.subSystems = {'Subsystem 1'};
model.modelID = 'ToyModel';

% Initiate the test
fprintf(' -- Running testIsReactionInSubSystem ... \n');

% Case 1
% Expected JSON content (with No metabolite annotation)
expectedJSONContent = [
    '{\n',...
    '"metabolites":[\n',...
    '{\n"id":"A_c",\n"name":"Metabolite A",\n"compartment":"c",\n"charge":0,\n"formula":"C6H12O6",\n"notes":{\n"original_vmh_ids":[\n"A[c]"\n]\n},\n"annotation":{\n}\n},\n',...
    '{\n"id":"B_c",\n"name":"Metabolite B",\n"compartment":"c",\n"charge":0,\n"formula":"C4H4O4",\n"notes":{\n"original_vmh_ids":[\n"B[c]"\n]\n},\n"annotation":{\n}\n}\n],\n',...
    '"reactions":[\n',...
    '{\n"id":"R1",\n"name":"Reaction 1",\n"metabolites":{\n"A_c":-1.0,\n"B_c":1.0\n},\n"lower_bound":0,\n"upper_bound":1000,\n"gene_reaction_rule":"G1",\n"subsystem":"Subsystem 1",',...
    '\n"notes":{\n"original_vmh_ids":[\n"R1"\n]\n},\n"annotation":{\n}\n}\n],\n',...
    '"genes":[\n',...
    '{\n"id":"G1",\n"name":"",\n"notes":{\n"original_vmh_ids":[\n"G1"\n]\n},\n"annotation":{\n}\n}\n],\n',...
    '"id":"ToyModel",\n',...
    '"compartments":{\n"c":"cytosol"\n}\n',...
    '}\n'
];

% Replace literal "\n" with actual newlines in expectedJSONContent
expectedJSONContent = strrep(expectedJSONContent, '\n', newline);

% Run the function being tested
outputFileName = 'toyModel_output.json';
model2JSON(model, outputFileName);

% Read the generated JSON file
fid = fopen(outputFileName, 'r');
generatedJSONContent = fread(fid, '*char')';
fclose(fid);

% Verify that the generated JSON matches the expected JSON
assert(strcmp(generatedJSONContent, expectedJSONContent), 'Generated JSON does not match the expected JSON');

% Case 2
% Expected JSON content (with one metabolite annotation)
model.metReactomeID = {'a', 'b'};

expectedJSONContent = [
    '{\n',...
    '"metabolites":[\n',...
    '{\n"id":"A_c",\n"name":"Metabolite A",\n"compartment":"c",\n"charge":0,\n"formula":"C6H12O6",\n"notes":{\n"original_vmh_ids":[\n"A[c]"\n]\n},\n"annotation":{\n"reactome.compound":[\n"a"\n]\n}\n},\n',...
    '{\n"id":"B_c",\n"name":"Metabolite B",\n"compartment":"c",\n"charge":0,\n"formula":"C4H4O4",\n"notes":{\n"original_vmh_ids":[\n"B[c]"\n]\n},\n"annotation":{\n"reactome.compound":[\n"b"\n]\n}\n}\n],\n',...
    '"reactions":[\n',...
    '{\n"id":"R1",\n"name":"Reaction 1",\n"metabolites":{\n"A_c":-1.0,\n"B_c":1.0\n},\n"lower_bound":0,\n"upper_bound":1000,\n"gene_reaction_rule":"G1",\n"subsystem":',...
    '"Subsystem 1",\n"notes":{\n"original_vmh_ids":[\n"R1"\n]\n},\n"annotation":{\n}\n}\n],\n',...
    '"genes":[\n',...
    '{\n"id":"G1",\n"name":"",\n"notes":{\n"original_vmh_ids":[\n"G1"\n]\n},\n"annotation":{\n}\n}\n],\n',...
    '"id":"ToyModel",\n',...
    '"compartments":{\n"c":"cytosol"\n}\n',...
    '}\n'
];

% Replace literal "\n" with actual newlines in expectedJSONContent
expectedJSONContent = strrep(expectedJSONContent, '\n', newline);

% Run the function being tested
outputFileName = 'toyModel_output.json';
model2JSON(model, outputFileName);

% Read the generated JSON file
fid = fopen(outputFileName, 'r');
generatedJSONContent = fread(fid, '*char')';
fclose(fid);

% Verify that the generated JSON matches the expected JSON
assert(strcmp(generatedJSONContent, expectedJSONContent), 'Generated JSON does not match the expected JSON');

% Case 3
% Expected JSON content (with multiple metabolite annotation)
model.metSEEDID = {'a', 'b'};

expectedJSONContent = [
    '{\n',...
    '"metabolites":[\n',...
    '{\n"id":"A_c",\n"name":"Metabolite A",\n"compartment":"c",\n"charge":0,\n"formula":"C6H12O6",\n"notes":{\n"original_vmh_ids":[\n"A[c]"\n]\n},\n"annotation":',...
    '{\n"reactome.compound":[\n"a"\n],\n"seed.compound":[\n"a"\n]\n}\n},\n',...
    '{\n"id":"B_c",\n"name":"Metabolite B",\n"compartment":"c",\n"charge":0,\n"formula":"C4H4O4",\n"notes":{\n"original_vmh_ids":[\n"B[c]"\n]\n},\n"annotation":',...
    '{\n"reactome.compound":[\n"b"\n],\n"seed.compound":[\n"b"\n]\n}\n}\n],\n',...
    '"reactions":[\n',...
    '{\n"id":"R1",\n"name":"Reaction 1",\n"metabolites":{\n"A_c":-1.0,\n"B_c":1.0\n},\n"lower_bound":0,\n"upper_bound":1000,\n"gene_reaction_rule":"G1",\n"subsystem":',...
    '"Subsystem 1",\n"notes":{\n"original_vmh_ids":[\n"R1"\n]\n},\n"annotation":{\n}\n}\n],\n',...
    '"genes":[\n',...
    '{\n"id":"G1",\n"name":"",\n"notes":{\n"original_vmh_ids":[\n"G1"\n]\n},\n"annotation":{\n}\n}\n],\n',...
    '"id":"ToyModel",\n',...
    '"compartments":{\n"c":"cytosol"\n}\n',...
    '}\n'
]; 


% Replace literal "\n" with actual newlines in expectedJSONContent
expectedJSONContent = strrep(expectedJSONContent, '\n', newline);

% Run the function being tested
outputFileName = 'toyModel_output.json';
model2JSON(model, outputFileName);

% Read the generated JSON file
fid = fopen(outputFileName, 'r');
generatedJSONContent = fread(fid, '*char')';
fclose(fid);

% Verify that the generated JSON matches the expected JSON
assert(strcmp(generatedJSONContent, expectedJSONContent), 'Generated JSON does not match the expected JSON');

% Case 4
% Expected JSON content (one reaction annotation)
model.rxnMetaNetXID = {'m1', 'm2'};

expectedJSONContent = [
    '{\n',...
    '"metabolites":[\n',...
    '{\n"id":"A_c",\n"name":"Metabolite A",\n"compartment":"c",\n"charge":0,\n"formula":"C6H12O6",\n"notes":{\n"original_vmh_ids":[\n"A[c]"\n]\n},\n"annotation":',...
    '{\n"reactome.compound":[\n"a"\n],\n"seed.compound":[\n"a"\n]\n}\n},\n',...
    '{\n"id":"B_c",\n"name":"Metabolite B",\n"compartment":"c",\n"charge":0,\n"formula":"C4H4O4",\n"notes":{\n"original_vmh_ids":[\n"B[c]"\n]\n},\n"annotation":',...
    '{\n"reactome.compound":[\n"b"\n],\n"seed.compound":[\n"b"\n]\n}\n}\n],\n',...
    '"reactions":[\n',...
    '{\n"id":"R1",\n"name":"Reaction 1",\n"metabolites":{\n"A_c":-1.0,\n"B_c":1.0\n},\n"lower_bound":0,\n"upper_bound":1000,\n"gene_reaction_rule":"G1",\n"subsystem":',...
    '"Subsystem 1",\n"notes":{\n"original_vmh_ids":[\n"R1"\n]\n},\n"annotation":{\n"metanetx.reaction":[\n"m1"\n]\n}\n}\n],\n',...
    '"genes":[\n',...
    '{\n"id":"G1",\n"name":"",\n"notes":{\n"original_vmh_ids":[\n"G1"\n]\n},\n"annotation":{\n}\n}\n],\n',...
    '"id":"ToyModel",\n',...
    '"compartments":{\n"c":"cytosol"\n}\n',...
    '}\n'
]; 


% Replace literal "\n" with actual newlines in expectedJSONContent
expectedJSONContent = strrep(expectedJSONContent, '\n', newline);

% Run the function being tested
outputFileName = 'toyModel_output.json';
model2JSON(model, outputFileName);

% Read the generated JSON file
fid = fopen(outputFileName, 'r');
generatedJSONContent = fread(fid, '*char')';
fclose(fid);

% Verify that the generated JSON matches the expected JSON
assert(strcmp(generatedJSONContent, expectedJSONContent), 'Generated JSON does not match the expected JSON');

% Case 5
% Expected JSON content (multiple reaction annotation)
model.rxnSBOTerms = {'s1', 's2'};

expectedJSONContent = [
    '{\n',...
    '"metabolites":[\n',...
    '{\n"id":"A_c",\n"name":"Metabolite A",\n"compartment":"c",\n"charge":0,\n"formula":"C6H12O6",\n"notes":{\n"original_vmh_ids":[\n"A[c]"\n]\n},\n"annotation":',...
    '{\n"reactome.compound":[\n"a"\n],\n"seed.compound":[\n"a"\n]\n}\n},\n',...
    '{\n"id":"B_c",\n"name":"Metabolite B",\n"compartment":"c",\n"charge":0,\n"formula":"C4H4O4",\n"notes":{\n"original_vmh_ids":[\n"B[c]"\n]\n},\n"annotation":',...
    '{\n"reactome.compound":[\n"b"\n],\n"seed.compound":[\n"b"\n]\n}\n}\n],\n',...
    '"reactions":[\n',...
    '{\n"id":"R1",\n"name":"Reaction 1",\n"metabolites":{\n"A_c":-1.0,\n"B_c":1.0\n},\n"lower_bound":0,\n"upper_bound":1000,\n"gene_reaction_rule":"G1",\n"subsystem":',...
    '"Subsystem 1",\n"notes":{\n"original_vmh_ids":[\n"R1"\n]\n},\n"annotation":{\n"metanetx.reaction":[\n"m1"\n],\n"sbo":[\n"s1"\n]\n}\n}\n],\n',...
    '"genes":[\n',...
    '{\n"id":"G1",\n"name":"",\n"notes":{\n"original_vmh_ids":[\n"G1"\n]\n},\n"annotation":{\n}\n}\n],\n',...
    '"id":"ToyModel",\n',...
    '"compartments":{\n"c":"cytosol"\n}\n',...
    '}\n'
]; 


% Replace literal "\n" with actual newlines in expectedJSONContent
expectedJSONContent = strrep(expectedJSONContent, '\n', newline);

% Run the function being tested
outputFileName = 'toyModel_output.json';
model2JSON(model, outputFileName);

% Read the generated JSON file
fid = fopen(outputFileName, 'r');
generatedJSONContent = fread(fid, '*char')';
fclose(fid);

% Verify that the generated JSON matches the expected JSON
assert(strcmp(generatedJSONContent, expectedJSONContent), 'Generated JSON does not match the expected JSON');

% Clean up (delete the generated JSON file)
delete(outputFileName);

% Change the directory back to the original
cd(currentDir);

% output a success message
fprintf('Done.\n');
